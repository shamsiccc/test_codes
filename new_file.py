import unittest


class TestMain(unittest.TestCase):
    def test_unique_names(self):
        mentors = [
            ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
             "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
             "Азамат Искаков", "Роман Гордиенко"],
            ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
             "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев",
             "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков",
             "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
            ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
             "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая",
             "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
            ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин",
             "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин",
             "Михаил Ларченко"]
        ]

        result = "Адилет, Азамат, Александр, Алексей, Алена, Анатолий, Анна, Антон, Вадим, Валерий, Владимир, Денис, Дмитрий, Евгений, Елена, Иван, Илья, Кирилл, Константин, Максим, Михаил, Никита, Николай, Олег, Павел, Ринат, Роман, Сергей, Татьяна, Тимур, Филипп, Эдгар, Юрий"
        all_list = []
        [all_list.extend(x) for x in mentors]
        all_names_list = [x.split(" ")[0].strip() for x in all_list]
        all_names_set = set(all_names_list)
        all_names_sorted = sorted(all_names_set)
        unique_names = ", ".join(all_names_sorted)
        self.assertEqual(unique_names, result)

    def test_fast_animal(self):
        hare_distances = [
            [8, 5, 3, 2, 0, 1, 1],
            [8, 5, 3, 2, 2, 1, 1],
            [8, 5, 3, 2, 1, 1, 1]
        ]
        turtle_distances = [3, 3, 3, 3, 3, 3, 3]

        hare_all = [sum(hare_distance) for hare_distance in hare_distances]
        turtle_all = sum(turtle_distances)
        expected = ["черепаха", "заяц", "одинаково"]
        results = []

        for hare_total in hare_all:
            if hare_total < turtle_all:
                results.append("черепаха")
            elif hare_total > turtle_all:
                results.append("заяц")
            else:
                results.append("одинаково")

        for result, expected_value in zip(results, expected):
            self.assertEqual(result, expected_value)

    def test_long_short_courses(self):
        courses = ["Java-разработчик с нуля", "Fullstack-разработчик на Python", "Python-разработчик с нуля",
                   "Frontend-разработчик с нуля"]
        mentors = [
            ["Филипп Воронов", "Анна Юшина", "Иван Бочаров", "Анатолий Корсаков", "Юрий Пеньков", "Илья Сухачев",
             "Иван Маркитан", "Ринат Бибиков", "Вадим Ерошевичев", "Тимур Сейсембаев", "Максим Батырев",
             "Никита Шумский", "Алексей Степанов", "Денис Коротков", "Антон Глушков", "Сергей Индюков",
             "Максим Воронцов", "Евгений Грязнов", "Константин Виролайнен", "Сергей Сердюк", "Павел Дерендяев"],
            ["Евгений Шмаргунов", "Олег Булыгин", "Александр Бардин", "Александр Иванов", "Кирилл Табельский",
             "Александр Ульянцев", "Роман Гордиенко", "Адилет Асканжоев", "Александр Шлейко", "Алена Батицкая",
             "Денис Ежков", "Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Максим Филипенко", "Елена Никитина"],
            ["Евгений Шмаргунов", "Олег Булыгин", "Дмитрий Демидов", "Кирилл Табельский", "Александр Ульянцев",
             "Александр Бардин", "Александр Иванов", "Антон Солонилин", "Максим Филипенко", "Елена Никитина",
             "Азамат Искаков", "Роман Гордиенко"],
            ["Владимир Чебукин", "Эдгар Нуруллин", "Евгений Шек", "Валерий Хаслер", "Татьяна Тен", "Александр Фитискин",
             "Александр Шлейко", "Алена Батицкая", "Александр Беспоясов", "Денис Ежков", "Николай Лопин",
             "Михаил Ларченко"]
        ]
        durations = [14, 20, 12, 20]
        expected = ['Самый короткий курс(ы): Python-разработчик с нуля - 12 месяца(ев)',
                    'Самый длинный курс(ы): Fullstack-разработчик на Python, Frontend-разработчик с нуля - 20 месяца(ев)']

        courses_list = []
        for course, mentor, duration in zip(courses, mentors, durations):
            course_dict = {"title": course, "mentors": mentor, "duration": duration}
            courses_list.append(course_dict)

        max_duration = max(durations)
        min_duration = min(durations)

        maxes = []
        minis = []
        for id, duration in enumerate(durations):
            if duration == max_duration:
                maxes.append(id)
            elif duration == min_duration:
                minis.append(id)

        courses_max = [x["title"] for id, x in enumerate(courses_list) if id in maxes]
        courses_min = [x["title"] for id, x in enumerate(courses_list) if id in minis]

        result = [f'Самый короткий курс(ы): {", ".join(courses_min)} - {min_duration} месяца(ев)',
                  f'Самый длинный курс(ы): {", ".join(courses_max)} - {max_duration} месяца(ев)']

        self.assertEqual(result, expected)
